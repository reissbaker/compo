// Generated by CoffeeScript 1.7.1
(function() {
  var Component, Database, Entity, Table, expect;

  expect = require('chai').expect;

  Table = require('../../../build/lib/core/table');

  Component = require('../../../build/lib/core/component');

  Database = require('../../../build/lib/core/database');

  Entity = require('../../../build/lib/core/entity');

  describe('database', function() {
    var db;
    db = null;
    beforeEach(function() {
      return db = new Database;
    });
    describe('table', function() {
      return it('returns a new table', function() {
        var table;
        table = db.table();
        return expect(table).to.be["instanceof"](Table);
      });
    });
    describe('drop', function() {
      it('drops the table if it was added', function() {
        var table;
        table = db.table();
        db.drop(table);
        return expect(db._tables).to.deep.equal([]);
      });
      return it('does nothing if the table was never added', function() {
        var db2, table;
        db2 = new Database;
        table = db.table();
        return db2.drop(table);
      });
    });
    describe('entity', function() {
      it('returns an Entity', function() {
        var entity;
        entity = db.entity();
        return expect(entity).to.be.an["instanceof"](Entity);
      });
      it('returns an entity with a unique id', function() {
        var a, b;
        a = db.entity();
        b = db.entity();
        return expect(a.id).to.not.equal(b.id);
      });
      it('keeps track of children', function() {
        var a, b;
        a = db.entity();
        b = db.entity(a);
        return expect(db.getChildren(a)).to.deep.equal([b]);
      });
      return it('keeps track of parents', function() {
        var a, b;
        a = db.entity();
        b = db.entity(a);
        return expect(db.getParent(b)).to.equal(a);
      });
    });
    describe('destroy', function() {
      it('destroys the entity', function() {
        var a;
        a = db.entity();
        db.destroy(a);
        return expect(db.isAlive(a)).to.not.be["true"];
      });
      it('destroys child entities when the parent is destroyed', function() {
        var a, b;
        a = db.entity();
        b = db.entity(a);
        db.destroy(a);
        expect(db.isAlive(a)).to.not.be["true"];
        expect(db.isAlive(b)).to.not.be["true"];
        return expect(db.getChildren(a)).to.equal(void 0);
      });
      return it('detaches all attached components from tables', function(done) {
        var component, entity, table;
        entity = db.entity();
        table = db.table();
        component = table.attach(entity, new Component);
        table.on('detach', function(detached) {
          expect(detached).to.equal(component);
          return done();
        });
        return db.destroy(entity);
      });
    });
    return describe('reset', function() {
      it('resets internal state', function() {
        var a, b;
        a = db.entity();
        b = db.entity(a);
        db.reset();
        expect(db.isAlive(a)).to.not.be["true"];
        expect(db.isAlive(b)).to.not.be["true"];
        expect(db.getChildren(a)).to.equal(void 0);
        return expect(db.getParent(b)).to.equal(void 0);
      });
      return it('resets tables', function() {
        var a, component, table;
        a = db.entity();
        table = db.table();
        component = table.attach(a, new Component);
        db.reset();
        return expect(table.getAttached()).to.deep.equal([]);
      });
    });
  });

}).call(this);
